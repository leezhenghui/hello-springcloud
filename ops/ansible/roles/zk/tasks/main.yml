- name: create zookeeper directory
  file: >
    state=directory
    path={{ item }}
  with_items:
    - "{{ data_dir }}"
    - "{{ logs_dir }}"
    - "{{ zk_move_to }}"
  tags: [zookeeper]

- name: check archive stat
  stat: path={{ zk_download_folder }}/{{ zk_archive }}
  register: zookeeper_archive_stat

- name: download zookeeper
  get_url: >
    url={{ zk_download }}
    dest={{ zk_download_folder }}
    url_username={{ zk_download_username }}
    url_password={{ zk_download_password }}
  register: zookeeper_was_downloaded
  when: zookeeper_archive_stat.stat.exists == False
  tags: [zookeeper]

- name: copy and unpack
  unarchive: >
    src={{ zk_download_folder }}/{{ zk_archive }}
    dest={{ zk_move_to }}
    remote_src=yes
  when: zookeeper_was_downloaded|changed
  tags: [zookeeper]

- name : Copy zookeeper configuration file
  copy:
    src: "{{ config_file }}"
    dest: "{{ config_dir }}"
    owner: root
    group: root
    mode: 0644
  tags: [zookeeper]

- name: Start zookeeper
  shell: "nohup {{ zk_home }}/bin/zkServer.sh start-foreground {{ config_dir }}/{{ config_file }}
    >{{ logs_dir }}/zookeeper.log 2>&1 &"
  tags: [zookeeper]

- pause:
    seconds: 10

- name: Check if Zookeeper is running
  shell: jps | grep "QuorumPeerMain" | grep -v grep
  ignore_errors: yes
  changed_when: false
  register: service_zookeeper_status
  tags: [zookeeper]

- name: Report status of zookeeper
  fail:
    msg: |
      Zookeeper is not running.
      Return code from `grep`:
      {{ service_zookeeper_status.rc }}
  when: service_zookeeper_status.rc != 0
  tags: [zookeeper]
